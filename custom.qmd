---
fig-width: 4.5
fig-height: 4
fig-align: center
---

```{r setup, include = FALSE}
source("global.R")
```

# Customize plots {#sec-customize}


## Layers

"Layers" refer to different reference lines or smoothers that are added to plots 
by default.  

Layers include 

- smoothing line through the data: `smooth`
- horizontal reference lines: `hline`
- identity lines: `abline`

For example, `dv_pred()` adds an identity line (`y = x`) for reference as 
well as a smoother through the data

```{r}
dv_pred(df)
```


These layers can all be customized or dropped from the plot altogether.  This 
section shows you how to do that. We'll work on this basic plot as well 
as plots that come right out of `pmplots`.

```{r}
p <- ggplot(df, aes(PRED, DV))  + geom_point() + pm_theme()
p
```



### Layer smooth

```{r}
p + pm_smooth()
```

or 

```{r, eval = FALSE}
layer_s(p)
```


### Layer abline

```{r}
p + pm_abline()
```

or 

```{r, eval = FALSE}
layer_a(p)
```

### Layer hline

```{r}
p + pm_hline(2000)
```

or

```{r, eval = FALSE}
layer_h(p, hline = 2000)
```


### Drop specific layers

```{r}
dv_pred(df, smooth = NULL)
```

```{r}
dv_pred(df, abline = NULL)
```

```{r}
cwres_time(df, hline = NULL)
```

```{r}
dv_pred(df, abline = NULL, smooth = NULL)
```

### Drop all layers 

```{r}
dv_pred(df, add_layers = FALSE)
```

### Modify layer specs

For example, change the values of argument for `geom_smooth()`

```{r}
cwres_time(
  df, 
  smooth = list(method = "gam", se = TRUE)
)
```

### Extra reference lines to [C]WRES plots

```{r}
wres_time(df) + geom_3s()
```


## Axes

You can pass lists of arguments as `xs` or `ys` to modify the x- or y-axis, 
respectively. These arguments get passed to `ggplot2::scale_x_continuous()` or 
`ggplot2::scale_y_continuous()`. 


### Modify x-axis

To modify the x-axis of a plot, pass a list of items as the `xs` argument; 
these items will get passed to `ggplot2::scale_x_continuous()`. 

For example, to make the x-axis log transformed and modify the breaks, write

```{r}
a <- list(trans = "log", breaks = logbr3())

dv_time(df, xs = a)
```

Note: that you can modify the x-axis label of a plot without modifying the scale
using `ggplot2::xlab()`

```{r}
dv_time(df) + xlab("Time (years)")
```


### Modify y-axis

To modify the y-axis of a plot, pass a list of items as the `ys` argument; 
these items will get passed to `ggplot2::scale_y_continuous()`. 

For example, to make the y-axis log transformed and modify the breaks, write

```{r}
dv_time(df, ys = a, yname = "Y-axis name")
```

There may also be a `yname` argument for a given plot that will let you 
directly change the y-axis label as in the example above. 

Note: that you can modify the y-axis label of a plot without modifying the scale
using `ggplot2::ylab()`

```{r}
dv_time(df) + ylab("Concentration (centrigrams/gallon)")
```



### Rotate x and y axis labels

#### Specify the angle {.unnumbered .unlisted}

```{r}
dv_pred(df) + rot_x(angle = 90) + rot_y()
```

#### Rotate to vertical {.unnumbered .unlisted}

We are typically rotating the tick labels on the x-axis and 
frequently it is convenient to ask for a totally vertical 
rendering

```{r}
#| fig-width: 7
#| fig-height: 5
cwres_cat(df, x = "STUDYc") + 
  facet_wrap(~CPc) + rot_x(vertical = TRUE)
```


### Flip coordinates when labels get cramped

If this is too cramped

```{r}
#| fig-width: 7
#| fig-height: 5
cont_cat(
  id, 
  y = c("WT", "BMI", "ALB", "CRCL"), 
  x = "STUDYc"
) %>% pm_grid()

```

Try this

```{r}
#| fig-height: 5
#| fig-width: 7

cont_cat(
  id, 
  y = c("WT", "BMI", "ALB", "CRCL"), 
  x = "STUDYc"
) %>% map(~.x+coord_flip()) %>% pm_grid()

```

### Standard axis titles

```{r}
pm_axis_time()
pm_axis_tad()
pm_axis_tafd()
pm_axis_res()
pm_axis_wres()
pm_axis_cwres()
pm_axis_cwresi()
pm_axis_npde()
pm_axis_dv()
pm_axis_pred()
pm_axis_ipred()
```

You can `glue()` in information with these functions

```{r}
pm_axis_time("hr")
```

Similar with 

```{r, eval = FALSE}
pm_axis_tafd("hr")
pm_axis_tad("hr")
```

And 

```{r}
pm_axis_dv("ASA concentration (ng/mL)")
```

Similar with 

```{r, eval = FALSE}
pm_axis_pred("ASA concentration (ng/mL)")
pm_axis_ipred("ASA concentration (ng/mL)")
```


### Log breaks


```{r}
logbr3()
```

```{r}
logbr()
```


### Custom breaks

Default breaks

```{r}
dv_time(df)
```

Break every 3 days

```{r}
dv_time(df, xby = 72)
```

Custom breaks and limits

```{r}
a <- list(breaks = seq(0,240,48), limits = c(0,240))
dv_time(df, xs = a)
```



## Replicate look and feel

```{r}
p <- ggplot(df, aes(IPRED,DV)) + geom_point()

p
```

### Theme

```{r}
p + pm_theme()
```

### Plain

```{r}
p + theme_plain()
```

### Smooth

```{r}
p + pm_smooth()
```

### Abline

```{r}
p + pm_abline()
```

### Horizontal reference line

```{r}
ggplot(df, aes(TIME,CWRES)) + geom_point() + pm_hline()
```

## Latex

### Latex in axis title

```{r}
dv_pred(df, x = "PRED//Concentration ($\\mu$g)")
```

### Latex in pairs plot

```{r}
#| fig-width: 6
#| fig-height: 6
data <- data.frame(
  m = rnorm(100), 
  s = rnorm(100), 
  n = rnorm(100)
)

x <- c("m//$\\mu$", "s//$\\sigma$", "n//$\\nu$")

pairs_plot(data,x)
```

### Latex in wrapped plots

```{r}
#| fig-width: 7
#| fig-height: 3
y <- c("WT//Weight (kg)", "BMI//BMI (kg/m$^2$)", "SCR//SCR (g/dL)")

wrap_cont_time(df, y = y, use_labels=TRUE)
```
